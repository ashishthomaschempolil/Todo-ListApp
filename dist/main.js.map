{"version":3,"file":"main.js","mappings":"mBAaA,MAAMA,EACJC,YAAaC,EAASC,EAAOC,EAAaC,EAASC,EAAUC,EAAOC,GAClEC,KAAKC,GAAKC,KAAKC,MAAsB,IAAhBD,KAAKE,UAC1BJ,KAAKP,QAAUA,EACfO,KAAKN,MAAQA,EACbM,KAAKL,YAAcA,EACnBK,KAAKJ,QAAUA,EACfI,KAAKH,SAAWA,EAChBG,KAAKF,MAAQA,EACbE,KAAKD,UAAYA,CACnB,EAcF,MAAMM,EACJb,cACEQ,KAAKM,MAAQ,EACf,CAEAC,YAAaC,GACX,OAAOR,KAAKM,MAAMG,MAAKC,GAAQA,EAAKT,KAAOO,GAC7C,CAEAG,SACE,OAAOX,KAAKM,KACd,CAEAM,aAAcF,GACZ,OAAOV,KAAKM,MAAMO,WAAUC,GAAKA,EAAEb,KAAOS,EAAKT,IACjD,ECjDF,MAAMc,EAAc,ID+DpB,MACEvB,cACEQ,KAAKgB,SAAW,CAAC,CACnB,CAEAC,SAAUP,GACR,GAAIA,aAAgBnB,EAAM,CACnBS,KAAKgB,SAASN,EAAKjB,WACtBO,KAAKgB,SAASN,EAAKjB,SAAW,IAAIY,GAEpC,MAAMa,EAAclB,KAAKgB,SAASN,EAAKjB,SAElCyB,EAAYX,YAAYG,EAAKT,KAChCiB,EAAYZ,MAAMa,KAAKT,EAE3B,CACF,CAEAU,WAAYC,GACV,MAAMH,EAAclB,KAAKgB,SAASK,EAAY5B,SACxC6B,EAAQJ,EAAYN,aAAaS,IACxB,IAAXC,IACFJ,EAAYZ,MAAMgB,GAASD,EAE/B,CAEAE,WAAYb,GACV,MAAMQ,EAAclB,KAAKgB,SAASN,EAAKjB,SACjC6B,EAAQJ,EAAYN,aAAaF,IACxB,IAAXY,GACFJ,EAAYZ,MAAMkB,OAAOF,EAAO,EAEpC,GC9FIZ,EAAO,IAAInB,EAAK,WAAY,SAAU,eAAgB,WAAY,YAAa,SAAU,cAE/FwB,EAAYE,SAASP,GAErBe,QAAQC,IAAIX,GAEZL,EAAKhB,MAAQ,QAEbqB,EAAYK,WAAWV,GAEvBe,QAAQC,IAAIX,GAEZ,MAAMY,EAAQ,IAAIpC,EAAK,WAAY,SAAU,eAAgB,WAAY,YAAa,SAAU,cAEhGwB,EAAYE,SAASU,GAErBF,QAAQC,IAAIX,E","sources":["webpack://todo-listapp/./src/task.js","webpack://todo-listapp/./src/index.js"],"sourcesContent":["/**\n * @class Task\n * @description This class is responsible for creating a task object\n * @param {string} project - The project of the task\n * @param {string} title - The title of the task\n * @param {string} description - The description of the task\n * @param {string} dueDate - The due date of the task\n * @param {string} priority - The priority of the task\n * @param {string} notes - The notes of the task\n * @param {string} checkList - The checklist of the task\n * @returns {object} - The task object\n * Available properties:\n */\nclass Task {\n  constructor (project, title, description, dueDate, priority, notes, checkList) {\n    this.id = Math.floor(Math.random() * 100000)\n    this.project = project\n    this.title = title\n    this.description = description\n    this.dueDate = dueDate\n    this.priority = priority\n    this.notes = notes\n    this.checkList = checkList\n  }\n}\n\n/**\n * @class TaskManager\n * @description This class is responsible for managing the tasks\n * @returns {object} - The task manager object\n * Available properties:\n * @property {array} tasks - The array of tasks\n * Available methods:\n * @method getTaskById - Get a task by id\n * @method getAll - Get all tasks\n * @method getTaskIndex - Get the index of a task\n */\nclass TaskManager {\n  constructor () {\n    this.tasks = []\n  }\n\n  getTaskById (taskId) {\n    return this.tasks.find(task => task.id === taskId)\n  }\n\n  getAll () {\n    return this.tasks\n  }\n\n  getTaskIndex (task) {\n    return this.tasks.findIndex(t => t.id === task.id)\n  }\n}\n\n/**\n * @class TaskStorage\n * @description This class is responsible for storing the tasks\n * @returns {object} - The task storage object\n * Available properties:\n * @property {object} taskManager - The task manager object\n * Available methods:\n * @method saveTask - Save a task\n * @method updateTask - Update a task\n * @method deleteTask - Delete a task\n  */\nclass TaskStorage {\n  constructor () {\n    this.projects = {}\n  }\n\n  saveTask (task) {\n    if (task instanceof Task) {\n      if (!this.projects[task.project]) {\n        this.projects[task.project] = new TaskManager()\n      }\n      const taskManager = this.projects[task.project]\n      // if task not in storage using taskid add it\n      if (!taskManager.getTaskById(task.id)) {\n        taskManager.tasks.push(task)\n      }\n    }\n  }\n\n  updateTask (updatedTask) {\n    const taskManager = this.projects[updatedTask.project]\n    const index = taskManager.getTaskIndex(updatedTask)\n    if (index !== -1) {\n      taskManager.tasks[index] = updatedTask\n    }\n  }\n\n  deleteTask (task) {\n    const taskManager = this.projects[task.project]\n    const index = taskManager.getTaskIndex(task)\n    if (index !== -1) {\n      taskManager.tasks.splice(index, 1)\n    }\n  }\n}\n\nexport { Task, TaskStorage }\n","import { Task, TaskStorage } from './task'\n\n\nconst taskStorage = new TaskStorage()\nconst task = new Task('project1', 'title1', 'description1', 'dueDate1', 'priority1', 'notes1', 'checkList1')\n\ntaskStorage.saveTask(task)\n\nconsole.log(taskStorage)\n\ntask.title = 'task2'\n\ntaskStorage.updateTask(task)\n\nconsole.log(taskStorage)\n\nconst task2 = new Task('project2', 'title2', 'description2', 'dueDate2', 'priority2', 'notes2', 'checkList2')\n\ntaskStorage.saveTask(task2)\n\nconsole.log(taskStorage)"],"names":["Task","constructor","project","title","description","dueDate","priority","notes","checkList","this","id","Math","floor","random","TaskManager","tasks","getTaskById","taskId","find","task","getAll","getTaskIndex","findIndex","t","taskStorage","projects","saveTask","taskManager","push","updateTask","updatedTask","index","deleteTask","splice","console","log","task2"],"sourceRoot":""}